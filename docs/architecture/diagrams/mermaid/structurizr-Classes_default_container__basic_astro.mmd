graph TB
  linkStyle default fill:#ffffff

  subgraph diagram ["Application - Application - Components"]
    style diagram fill:#ffffff,stroke:#ffffff

    subgraph 8 ["Application"]
      style 8 fill:#ffffff,stroke:#2e6295,color:#2e6295

      100("<div style='font-weight: bold'>basic-astro.createSyntheticRenderFunction</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Create a synthetic render<br />function for an Astro<br />component Every Astro<br />component is fundamentally a<br />server-side render function<br />that: 1. Receives props (if<br />Props interface is defined)<br />2. Processes the component<br />logic (frontmatter code) 3.<br />Renders the template to HTML<br />4. Returns an HTML string<br />Since Astro's compiler<br />doesn't explicitly define<br />this, we create a synthetic<br />function to represent the<br />component's executable<br />behavior in the IR. The<br />function is named after the<br />file (without .astro<br />extension): - Button.astro →<br />function Button() -<br />index.astro → function<br />index() -<br />settings/Profile.astro →<br />function Profile()</div>")
      style 100 fill:#85bbf0,stroke:#5d82a8,color:#000000
      101("<div style='font-weight: bold'>basic-astro.extractJSDocBlocks</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract all JSDoc comment<br />blocks from source code<br />Matches /** ... *\\/ style<br />comments and parses their<br />tags</div>")
      style 101 fill:#85bbf0,stroke:#5d82a8,color:#000000
      102("<div style='font-weight: bold'>basic-astro.parseJSDocBlock</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Parse a single JSDoc comment<br />block into description and<br />tags</div>")
      style 102 fill:#85bbf0,stroke:#5d82a8,color:#000000
      103("<div style='font-weight: bold'>basic-astro.extractFileComponent</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract component information<br />from frontmatter JSDoc<br />Attempts to identify the<br />component in this file using<br />JSDoc tags: 1. Checks for</div>")
      style 103 fill:#85bbf0,stroke:#5d82a8,color:#000000
      104("<div style='font-weight: bold'>basic-astro.extractComponentName</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract component name from a<br />JSDoc tag value Parses the<br />tag value to extract the<br />component name, handling<br />various formats: - Simple<br />name: ComponentName - With<br />description: ComponentName -<br />Description - Module path:<br />path/to/module (extracts last<br />directory component) - Dashes<br />preserved: My-Component-Name<br />For module paths like<br />"utils/helpers", extracts<br />"utils" (the last directory<br />before the filename) to<br />enable component grouping.</div>")
      style 104 fill:#85bbf0,stroke:#5d82a8,color:#000000
      105("<div style='font-weight: bold'>basic-astro.extractFileActors</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract actors from<br />frontmatter JSDoc Identifies<br />external actors (users,<br />systems) that interact with<br />the component. Actors are<br />specified using</div>")
      style 105 fill:#85bbf0,stroke:#5d82a8,color:#000000
      106("<div style='font-weight: bold'>basic-astro.parseActorTag</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Parse an</div>")
      style 106 fill:#85bbf0,stroke:#5d82a8,color:#000000
      107("<div style='font-weight: bold'>basic-astro.extractFileRelationships</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract relationships from<br />frontmatter JSDoc Identifies<br />component dependencies using</div>")
      style 107 fill:#85bbf0,stroke:#5d82a8,color:#000000
      108("<div style='font-weight: bold'>basic-astro.parseUsesTag</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Parse a</div>")
      style 108 fill:#85bbf0,stroke:#5d82a8,color:#000000
      109("<div style='font-weight: bold'>basic-astro.inferComponentFromPath</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Infer component name from<br />file path When no explicit</div>")
      style 109 fill:#85bbf0,stroke:#5d82a8,color:#000000
      110("<div style='font-weight: bold'>basic-astro.findSourceFiles</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Find Astro source files<br />matching the given patterns<br />Locates all .astro files in<br />the workspace using glob<br />patterns. Returns absolute<br />paths to enable downstream<br />processing. Default patterns<br />include src directory and<br />exclude node_modules, dist,<br />build, and .astro.</div>")
      style 110 fill:#85bbf0,stroke:#5d82a8,color:#000000
      111("<div style='font-weight: bold'>basic-astro.findPackageJsonFiles</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Find all package.json files<br />in the workspace Extracts<br />base directories from include<br />patterns and searches<br />multiple directory levels to<br />locate all package.json<br />files. Useful for identifying<br />container boundaries and<br />package metadata (name,<br />version, description).</div>")
      style 111 fill:#85bbf0,stroke:#5d82a8,color:#000000
      112("<div style='font-weight: bold'>basic-astro.readPackageInfo</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Read package.json and extract<br />metadata Parses a<br />package.json file and<br />extracts key metadata fields:<br />name, version, and<br />description. Returns null on<br />read or parse errors (logged<br />as warnings).</div>")
      style 112 fill:#85bbf0,stroke:#5d82a8,color:#000000
      113("<div style='font-weight: bold'>basic-astro.findNearestPackage</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Find the nearest package.json<br />for a given file Searches<br />through all known packages<br />and finds the one whose<br />directory is the closest<br />parent of the given file.<br />Packages are sorted by depth<br />(deepest first) to prioritize<br />monorepo sub-packages over<br />workspace root packages.</div>")
      style 113 fill:#85bbf0,stroke:#5d82a8,color:#000000
      114("<div style='font-weight: bold'>basic-astro.parseFiles</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Parse Astro files using</div>")
      style 114 fill:#85bbf0,stroke:#5d82a8,color:#000000
      115("<div style='font-weight: bold'>basic-astro.extractFrontmatter</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract frontmatter content<br />from Astro file Astro files<br />have two sections separated<br />by --- markers: -<br />Frontmatter:<br />TypeScript/JavaScript code at<br />the top (server-side) -<br />Template: HTML markup and<br />component usage (client-side)<br />This function extracts only<br />the frontmatter section.<br />Returns empty string if no<br />frontmatter. Handles both<br />Unix and Windows line endings<br />for cross-platform<br />compatibility.</div>")
      style 115 fill:#85bbf0,stroke:#5d82a8,color:#000000
      116("<div style='font-weight: bold'>basic-astro.extractImports</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract import statements<br />from frontmatter Parses all<br />import declarations using<br />regex and categorizes them: -<br />Default imports: import Foo<br />from 'bar' - Named imports:<br />import { Foo, Bar } from<br />'baz' - Namespace imports:<br />import * as Foo from 'bar'<br />Also handles aliased imports<br />like: import { Foo as F }<br />from 'bar'</div>")
      style 116 fill:#85bbf0,stroke:#5d82a8,color:#000000
      117("<div style='font-weight: bold'>basic-astro.findSlots</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Find slot tags in the<br />template Astro components can<br />define slots to allow content<br />projection: - Default slot:<br /><slot /> (unnamed) - Named<br />slot: <slot name="header" /><br />Returns location information<br />(line number) for each slot<br />found.</div>")
      style 117 fill:#85bbf0,stroke:#5d82a8,color:#000000
      118("<div style='font-weight: bold'>basic-astro.findClientDirective</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Find client directive in<br />component usage Astro allows<br />hydration directives to run<br />components on the client: -<br />client:load - Eager hydration<br />- client:idle - Hydrate when<br />browser is idle -<br />client:visible - Hydrate when<br />component enters viewport -<br />client:media - Hydrate when<br />media query matches -<br />client:only - Hydrate only on<br />client (no SSR) Returns the<br />first directive found. Used<br />to indicate interactive<br />components.</div>")
      style 118 fill:#85bbf0,stroke:#5d82a8,color:#000000
      119("<div style='font-weight: bold'>basic-astro.extractComponentUsage</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract component usage from<br />template Identifies which<br />imported components are<br />actually used in the template<br />markup. Only includes<br />components that: 1. Start<br />with an uppercase letter (C4<br />naming convention) 2. Are<br />found in the import<br />statements 3. Appear in the<br />template markup Component<br />names in Astro are PascalCase<br />by convention (e.g., Header,<br />Footer). This function uses<br />the import list to avoid<br />false positives from HTML<br />elements.</div>")
      style 119 fill:#85bbf0,stroke:#5d82a8,color:#000000
      120("<div style='font-weight: bold'>basic-astro.mapToIR</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Map file extractions to<br />ArchletteIR Transforms<br />extracted Astro component<br />data into standardized<br />ArchletteIR format. This is<br />the final step before DSL<br />generation and diagram<br />rendering. Algorithm (4 main<br />steps): 1. **Aggregation** -<br />Combine all file extractions:<br />- Register components,<br />actors, code items from all<br />files - Detect and merge<br />duplicates (same component in<br />multiple files) - Build<br />relationship graph from</div>")
      style 120 fill:#85bbf0,stroke:#5d82a8,color:#000000
      121("<div style='font-weight: bold'>basic-astro.mapClassToCodeItems</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Map a class to code items<br />(class + methods)</div>")
      style 121 fill:#85bbf0,stroke:#5d82a8,color:#000000
      122("<div style='font-weight: bold'>basic-astro.mapFunctionToCodeItem</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Map a function to a code item</div>")
      style 122 fill:#85bbf0,stroke:#5d82a8,color:#000000
      81("<div style='font-weight: bold'>basic-astro.basicAstroExtractor</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract architecture<br />information from an Astro<br />codebase</div>")
      style 81 fill:#85bbf0,stroke:#5d82a8,color:#000000
      99("<div style='font-weight: bold'>basic-astro.extractCodeFromFrontmatter</div><div style='font-size: 70%; margin-top: 0px'>[Component: function]</div><div style='font-size: 80%; margin-top:10px'>Extract TypeScript/JavaScript<br />code from Astro frontmatter<br />Parses the frontmatter<br />section (code between ---<br />markers) as TypeScript and<br />extracts code elements using<br />the basic-node AST<br />extractors: - Classes and<br />their methods - Functions<br />(both regular and arrow<br />functions) - Type aliases<br />(type X = ...) - TypeScript<br />interfaces Returns empty<br />result if frontmatter is<br />empty or parsing fails<br />(errors are logged). Graceful<br />error handling ensures one<br />malformed Astro file doesn't<br />break the extraction<br />pipeline.</div>")
      style 99 fill:#85bbf0,stroke:#5d82a8,color:#000000
    end

  end