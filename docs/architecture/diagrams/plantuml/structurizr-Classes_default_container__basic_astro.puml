@startuml
set separator none
title Application - Application - Components

top to bottom direction
skinparam ranksep 60
skinparam nodesep 30

skinparam {
  arrowFontSize 10
  defaultTextAlignment center
  wrapWidth 200
  maxMessageSize 100
  defaultFontName "Arial"
}

hide stereotype

skinparam rectangle<<Application.Application.basicastrobasicAstroExtractor>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastrocreateSyntheticRenderFunction>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractCodeFromFrontmatter>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractComponentName>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractComponentUsage>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractFileActors>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractFileComponent>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractFileRelationships>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractFrontmatter>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractImports>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroextractJSDocBlocks>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastrofindClientDirective>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastrofindNearestPackage>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastrofindPackageJsonFiles>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastrofindSlots>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastrofindSourceFiles>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroinferComponentFromPath>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastromapClassToCodeItems>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastromapFunctionToCodeItem>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastromapToIR>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroparseActorTag>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroparseFiles>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroparseJSDocBlock>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroparseUsesTag>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application.basicastroreadPackageInfo>> {
  BackgroundColor #85bbf0
  FontColor #000000
  BorderColor #5d82a8
  roundCorner 20
  shadowing false
}
skinparam rectangle<<Application.Application>> {
  BorderColor #2e6295
  FontColor #2e6295
  shadowing false
}

rectangle "Application\n<size:10>[Container: Application]</size>" <<Application.Application>> {
  rectangle "==basic-astro.createSyntheticRenderFunction\n<size:10>[Component: function]</size>\n\nCreate a synthetic render function for an Astro component Every Astro component is fundamentally a server-side render function that: 1. Receives props (if Props interface is defined) 2. Processes the component logic (frontmatter code) 3. Renders the template to HTML 4. Returns an HTML string Since Astro's compiler doesn't explicitly define this, we create a synthetic function to represent the component's executable behavior in the IR. The function is named after the file (without .astro extension): - Button.astro → function Button() - index.astro → function index() - settings/Profile.astro → function Profile()" <<Application.Application.basicastrocreateSyntheticRenderFunction>> as Application.Application.basicastrocreateSyntheticRenderFunction
  rectangle "==basic-astro.extractJSDocBlocks\n<size:10>[Component: function]</size>\n\nExtract all JSDoc comment blocks from source code Matches /** ... *\\/ style comments and parses their tags" <<Application.Application.basicastroextractJSDocBlocks>> as Application.Application.basicastroextractJSDocBlocks
  rectangle "==basic-astro.parseJSDocBlock\n<size:10>[Component: function]</size>\n\nParse a single JSDoc comment block into description and tags" <<Application.Application.basicastroparseJSDocBlock>> as Application.Application.basicastroparseJSDocBlock
  rectangle "==basic-astro.extractFileComponent\n<size:10>[Component: function]</size>\n\nExtract component information from frontmatter JSDoc Attempts to identify the component in this file using JSDoc tags: 1. Checks for" <<Application.Application.basicastroextractFileComponent>> as Application.Application.basicastroextractFileComponent
  rectangle "==basic-astro.extractComponentName\n<size:10>[Component: function]</size>\n\nExtract component name from a JSDoc tag value Parses the tag value to extract the component name, handling various formats: - Simple name: ComponentName - With description: ComponentName - Description - Module path: path/to/module (extracts last directory component) - Dashes preserved: My-Component-Name For module paths like "utils/helpers", extracts "utils" (the last directory before the filename) to enable component grouping." <<Application.Application.basicastroextractComponentName>> as Application.Application.basicastroextractComponentName
  rectangle "==basic-astro.extractFileActors\n<size:10>[Component: function]</size>\n\nExtract actors from frontmatter JSDoc Identifies external actors (users, systems) that interact with the component. Actors are specified using" <<Application.Application.basicastroextractFileActors>> as Application.Application.basicastroextractFileActors
  rectangle "==basic-astro.parseActorTag\n<size:10>[Component: function]</size>\n\nParse an" <<Application.Application.basicastroparseActorTag>> as Application.Application.basicastroparseActorTag
  rectangle "==basic-astro.extractFileRelationships\n<size:10>[Component: function]</size>\n\nExtract relationships from frontmatter JSDoc Identifies component dependencies using" <<Application.Application.basicastroextractFileRelationships>> as Application.Application.basicastroextractFileRelationships
  rectangle "==basic-astro.parseUsesTag\n<size:10>[Component: function]</size>\n\nParse a" <<Application.Application.basicastroparseUsesTag>> as Application.Application.basicastroparseUsesTag
  rectangle "==basic-astro.inferComponentFromPath\n<size:10>[Component: function]</size>\n\nInfer component name from file path When no explicit" <<Application.Application.basicastroinferComponentFromPath>> as Application.Application.basicastroinferComponentFromPath
  rectangle "==basic-astro.findSourceFiles\n<size:10>[Component: function]</size>\n\nFind Astro source files matching the given patterns Locates all .astro files in the workspace using glob patterns. Returns absolute paths to enable downstream processing. Default patterns include src directory and exclude node_modules, dist, build, and .astro." <<Application.Application.basicastrofindSourceFiles>> as Application.Application.basicastrofindSourceFiles
  rectangle "==basic-astro.findPackageJsonFiles\n<size:10>[Component: function]</size>\n\nFind all package.json files in the workspace Extracts base directories from include patterns and searches multiple directory levels to locate all package.json files. Useful for identifying container boundaries and package metadata (name, version, description)." <<Application.Application.basicastrofindPackageJsonFiles>> as Application.Application.basicastrofindPackageJsonFiles
  rectangle "==basic-astro.readPackageInfo\n<size:10>[Component: function]</size>\n\nRead package.json and extract metadata Parses a package.json file and extracts key metadata fields: name, version, and description. Returns null on read or parse errors (logged as warnings)." <<Application.Application.basicastroreadPackageInfo>> as Application.Application.basicastroreadPackageInfo
  rectangle "==basic-astro.findNearestPackage\n<size:10>[Component: function]</size>\n\nFind the nearest package.json for a given file Searches through all known packages and finds the one whose directory is the closest parent of the given file. Packages are sorted by depth (deepest first) to prioritize monorepo sub-packages over workspace root packages." <<Application.Application.basicastrofindNearestPackage>> as Application.Application.basicastrofindNearestPackage
  rectangle "==basic-astro.parseFiles\n<size:10>[Component: function]</size>\n\nParse Astro files using" <<Application.Application.basicastroparseFiles>> as Application.Application.basicastroparseFiles
  rectangle "==basic-astro.extractFrontmatter\n<size:10>[Component: function]</size>\n\nExtract frontmatter content from Astro file Astro files have two sections separated by --- markers: - Frontmatter: TypeScript/JavaScript code at the top (server-side) - Template: HTML markup and component usage (client-side) This function extracts only the frontmatter section. Returns empty string if no frontmatter. Handles both Unix and Windows line endings for cross-platform compatibility." <<Application.Application.basicastroextractFrontmatter>> as Application.Application.basicastroextractFrontmatter
  rectangle "==basic-astro.extractImports\n<size:10>[Component: function]</size>\n\nExtract import statements from frontmatter Parses all import declarations using regex and categorizes them: - Default imports: import Foo from 'bar' - Named imports: import { Foo, Bar } from 'baz' - Namespace imports: import * as Foo from 'bar' Also handles aliased imports like: import { Foo as F } from 'bar'" <<Application.Application.basicastroextractImports>> as Application.Application.basicastroextractImports
  rectangle "==basic-astro.findSlots\n<size:10>[Component: function]</size>\n\nFind slot tags in the template Astro components can define slots to allow content projection: - Default slot: <slot /> (unnamed) - Named slot: <slot name="header" /> Returns location information (line number) for each slot found." <<Application.Application.basicastrofindSlots>> as Application.Application.basicastrofindSlots
  rectangle "==basic-astro.findClientDirective\n<size:10>[Component: function]</size>\n\nFind client directive in component usage Astro allows hydration directives to run components on the client: - client:load - Eager hydration - client:idle - Hydrate when browser is idle - client:visible - Hydrate when component enters viewport - client:media - Hydrate when media query matches - client:only - Hydrate only on client (no SSR) Returns the first directive found. Used to indicate interactive components." <<Application.Application.basicastrofindClientDirective>> as Application.Application.basicastrofindClientDirective
  rectangle "==basic-astro.extractComponentUsage\n<size:10>[Component: function]</size>\n\nExtract component usage from template Identifies which imported components are actually used in the template markup. Only includes components that: 1. Start with an uppercase letter (C4 naming convention) 2. Are found in the import statements 3. Appear in the template markup Component names in Astro are PascalCase by convention (e.g., Header, Footer). This function uses the import list to avoid false positives from HTML elements." <<Application.Application.basicastroextractComponentUsage>> as Application.Application.basicastroextractComponentUsage
  rectangle "==basic-astro.mapToIR\n<size:10>[Component: function]</size>\n\nMap file extractions to ArchletteIR Transforms extracted Astro component data into standardized ArchletteIR format. This is the final step before DSL generation and diagram rendering. Algorithm (4 main steps): 1. **Aggregation** - Combine all file extractions: - Register components, actors, code items from all files - Detect and merge duplicates (same component in multiple files) - Build relationship graph from" <<Application.Application.basicastromapToIR>> as Application.Application.basicastromapToIR
  rectangle "==basic-astro.mapClassToCodeItems\n<size:10>[Component: function]</size>\n\nMap a class to code items (class + methods)" <<Application.Application.basicastromapClassToCodeItems>> as Application.Application.basicastromapClassToCodeItems
  rectangle "==basic-astro.mapFunctionToCodeItem\n<size:10>[Component: function]</size>\n\nMap a function to a code item" <<Application.Application.basicastromapFunctionToCodeItem>> as Application.Application.basicastromapFunctionToCodeItem
  rectangle "==basic-astro.basicAstroExtractor\n<size:10>[Component: function]</size>\n\nExtract architecture information from an Astro codebase" <<Application.Application.basicastrobasicAstroExtractor>> as Application.Application.basicastrobasicAstroExtractor
  rectangle "==basic-astro.extractCodeFromFrontmatter\n<size:10>[Component: function]</size>\n\nExtract TypeScript/JavaScript code from Astro frontmatter Parses the frontmatter section (code between --- markers) as TypeScript and extracts code elements using the basic-node AST extractors: - Classes and their methods - Functions (both regular and arrow functions) - Type aliases (type X = ...) - TypeScript interfaces Returns empty result if frontmatter is empty or parsing fails (errors are logged). Graceful error handling ensures one malformed Astro file doesn't break the extraction pipeline." <<Application.Application.basicastroextractCodeFromFrontmatter>> as Application.Application.basicastroextractCodeFromFrontmatter
}

@enduml