@startuml
set separator none
title Application - Application - Components

top to bottom direction
skinparam ranksep 60
skinparam nodesep 30

skinparam {
  arrowFontSize 10
  defaultTextAlignment center
  wrapWidth 200
  maxMessageSize 100
}

hide stereotype

skinparam rectangle<<Application.Application.basic_wrangler__basicwranglerextractor>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__buildcontainerdescription>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__extractcontainerrelationships>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__extractcontainers>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__extractdeploymentrelationships>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__extractdeploymentsandinstances>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__findwranglerfiles>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__getenvironmentconfig>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__getenvironments>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__maptoir>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__normalizeservicebindings>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application.basic_wrangler__parsewranglerfile>> {
  BackgroundColor #dddddd
  FontColor #000000
  BorderColor #9a9a9a
  shadowing false
}
skinparam rectangle<<Application.Application>> {
  BorderColor #9a9a9a
  FontColor #9a9a9a
  shadowing false
}

rectangle "Application\n<size:10>[Container: Application]</size>" <<Application.Application>> {
  rectangle "==basic_wrangler__findwranglerfiles\n<size:10>[Component: function]</size>\n\nFind wrangler.toml files based on include/exclude patterns" <<Application.Application.basic_wrangler__findwranglerfiles>> as Application.Application.basic_wrangler__findwranglerfiles
  rectangle "==basic_wrangler__maptoir\n<size:10>[Component: function]</size>\n\nMap wrangler configurations to ArchletteIR\n\nThis creates:\n- Containers: One per wrangler.toml file\n- Deployments: One per environment (production, dev, preview, etc.)\n- Container Instances: One per container per environment\n- Container Relationships: Logical dependencies from service bindings\n- Deployment Relationships: Physical instance-to-instance connections" <<Application.Application.basic_wrangler__maptoir>> as Application.Application.basic_wrangler__maptoir
  rectangle "==basic_wrangler__extractcontainers\n<size:10>[Component: function]</size>\n\nExtract containers from wrangler configurations\n\nCreates one container per wrangler.toml file.\nEach container represents a Cloudflare Worker." <<Application.Application.basic_wrangler__extractcontainers>> as Application.Application.basic_wrangler__extractcontainers
  rectangle "==basic_wrangler__buildcontainerdescription\n<size:10>[Component: function]</size>\n\nBuild a descriptive summary for a container" <<Application.Application.basic_wrangler__buildcontainerdescription>> as Application.Application.basic_wrangler__buildcontainerdescription
  rectangle "==basic_wrangler__extractdeploymentsandinstances\n<size:10>[Component: function]</size>\n\nExtract deployments and container instances\n\nCreates:\n- One deployment per environment\n- Container instances for each container in each environment" <<Application.Application.basic_wrangler__extractdeploymentsandinstances>> as Application.Application.basic_wrangler__extractdeploymentsandinstances
  rectangle "==basic_wrangler__extractcontainerrelationships\n<size:10>[Component: function]</size>\n\nExtract container relationships from service bindings\n\nCreates logical dependencies between containers based on service bindings.\nDeduplicates relationships across all environments." <<Application.Application.basic_wrangler__extractcontainerrelationships>> as Application.Application.basic_wrangler__extractcontainerrelationships
  rectangle "==basic_wrangler__extractdeploymentrelationships\n<size:10>[Component: function]</size>\n\nExtract deployment relationships from container instances\n\nCreates physical instance-to-instance relationships based on service bindings.\nEach relationship represents an actual runtime dependency in a specific environment." <<Application.Application.basic_wrangler__extractdeploymentrelationships>> as Application.Application.basic_wrangler__extractdeploymentrelationships
  rectangle "==basic_wrangler__parsewranglerfile\n<size:10>[Component: function]</size>\n\nParse a wrangler.toml file" <<Application.Application.basic_wrangler__parsewranglerfile>> as Application.Application.basic_wrangler__parsewranglerfile
  rectangle "==basic_wrangler__normalizeservicebindings\n<size:10>[Component: function]</size>\n\nNormalize service bindings from various formats\n\nWrangler supports multiple binding formats:\n- [[services]] array (TOML array of tables)\n- services = [{ binding = "...", service = "..." }]" <<Application.Application.basic_wrangler__normalizeservicebindings>> as Application.Application.basic_wrangler__normalizeservicebindings
  rectangle "==basic_wrangler__getenvironments\n<size:10>[Component: function]</size>\n\nGet all environments from a wrangler config\n\nReturns a list of environment names, including:\n- "production" (from root-level config if it has deployable content)\n- All keys from env.* sections" <<Application.Application.basic_wrangler__getenvironments>> as Application.Application.basic_wrangler__getenvironments
  rectangle "==basic_wrangler__getenvironmentconfig\n<size:10>[Component: function]</size>\n\nGet configuration for a specific environment\n\nMerges root-level config with environment-specific overrides.\nEnvironment config takes precedence." <<Application.Application.basic_wrangler__getenvironmentconfig>> as Application.Application.basic_wrangler__getenvironmentconfig
  rectangle "==basic_wrangler__basicwranglerextractor\n<size:10>[Component: function]</size>\n\nExtract deployment topology from Cloudflare Wrangler configuration files" <<Application.Application.basic_wrangler__basicwranglerextractor>> as Application.Application.basic_wrangler__basicwranglerextractor
}

@enduml